{"version":3,"sources":["components/sidebar/Rooms.js","components/sidebar/Sidebar.js","components/chat/Message.js","axios.js","components/chat/Chat.js","App.js","serviceWorker.js","index.js"],"names":["Room","avatar","name","latest","datetime","className","Avatar","src","Sidebar","IconButton","type","placeholder","Message","message","isreceiver","instance","axios","create","baseURL","ChatRoom","members","messages","useState","input","setInput","sendMessage","e","a","preventDefault","post","received","timestamp","map","value","onChange","target","onClick","App","setMessages","useEffect","get","then","resp","data","channel","Pusher","cluster","subscribe","bind","unbind_all","unsubscribe","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3c052fda.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Avatar } from '@material-ui/core'\r\n\r\nimport '../../styles/Rooms.css';\r\n\r\nfunction Room({ avatar, name, latest, datetime }) {\r\n    return (\r\n        <div className=\"room\">\r\n            <Avatar src={avatar}/>\r\n            <div className=\"room-info\">\r\n                <h3>{name}</h3>\r\n                <p>{latest}</p>\r\n                <div className=\"room-otherinfo\">\r\n                    {datetime && <p>{datetime}</p>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Room;\r\n","import React from 'react'\r\nimport Room from './Rooms';\r\n\r\nimport '../../styles/Sidebar.css';\r\n\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\n\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nfunction Sidebar() {\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"header\">\r\n                <Avatar />\r\n                <div className=\"sidebar-actions\">\r\n                    <IconButton>\r\n                        <DonutLargeIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <ChatIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            <div className=\"search\">\r\n                <div className=\"sidebar-searchbar\">\r\n                    <SearchIcon />\r\n                    <input type=\"text\" placeholder=\"Search or start new chat\"></input>\r\n                </div>\r\n            </div>\r\n            <div className=\"rooms\">\r\n                <Room \r\n                    name=\"Hello World\"\r\n                    latest=\"This is the latest chat\"\r\n                ></Room>\r\n                <Room \r\n                    name=\"Hello World\"\r\n                    latest=\"This is the latest chat\"\r\n                ></Room>\r\n                <Room \r\n                    name=\"Hello World\"\r\n                    latest=\"This is the latest chat\"\r\n                ></Room>\r\n                <Room \r\n                    name=\"Hello World\"\r\n                    latest=\"This is the latest chat\"\r\n                ></Room>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react'\r\n\r\nimport '../../styles/Message.css';\r\n\r\nfunction Message({ name, message, datetime, isreceiver}) {\r\n    return (\r\n        <div className={isreceiver ? 'message receiver' : 'message'}>\r\n            <span className=\"name\">{name}</span>\r\n            <span className=\"text\">{message}</span>\r\n            <span className=\"timestamp\">{'20:20'}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:50000'\r\n});\r\n\r\nexport default instance;","import React, { useState } from 'react';\r\nimport Message from './Message';\r\nimport axios from '../../axios'\r\n\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\n\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport EmojiEmotionsOutlinedIcon from '@material-ui/icons/EmojiEmotionsOutlined';\r\n\r\nimport '../../styles/Chat.css';\r\n\r\nfunction ChatRoom({ name, members, messages }) {\r\n    const [input, setInput] = useState('')\r\n    const sendMessage = async function (e) {\r\n        e.preventDefault();\r\n        debugger\r\n        await axios.post('/messages/new/', {\r\n            name: 'Jemsun',\r\n            message: input,\r\n            received: true,\r\n            timestamp: '03:30 PM'\r\n        });\r\n\r\n        setInput('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat-header\">\r\n                <div className=\"chat-infocont\">\r\n                    <Avatar />\r\n                    <div className=\"details\">\r\n                        <h3>Musick</h3>\r\n                        <p>Test Member List</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"chat-actions\">\r\n                    <IconButton>\r\n                        <SearchIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <AttachFileIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            <div className=\"chat-body\">\r\n                {\r\n                    messages.map(function ({ name, message, received }) {\r\n                        return <Message \r\n                            name={name}\r\n                            message={message}\r\n                            isreceiver={received}\r\n                        ></Message>\r\n                    })\r\n                }\r\n            </div>\r\n            <div className=\"chat-footer\">\r\n                <IconButton>\r\n                    <EmojiEmotionsOutlinedIcon />\r\n                </IconButton>\r\n                <form className=\"chat-message\">\r\n                    <input value={input} \r\n                        onChange={e => setInput(e.target.value)} \r\n                        type=\"text\" \r\n                        placeholder=\"Search or start new chat\">\r\n                    </input>\r\n                    <button type=\"submit\" onClick={sendMessage}>Send a message</button>\r\n                </form>\r\n                <IconButton>\r\n                    <MicIcon />\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatRoom\r\n","import React, { useEffect, useState } from 'react';\nimport Pusher from 'pusher-js'\nimport './App.css';\n\n// components\nimport Sidebar from './components/sidebar/Sidebar';\nimport ChatRoom from './components/chat/Chat';\nimport axios from './axios';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(function () {\n    axios.get('/messages/list/').then(function (resp) {\n      setMessages(resp.data);\n    });\n  }, []);\n\n  useEffect(function () {\n    var pusher = new Pusher('55cdf24316815e34282f', {\n      cluster: 'ap1'\n    });\n\n    var channel = pusher.subscribe('messages');\n    channel.bind('inserted', function(data) {\n      setMessages([...messages, data]);\n    });\n\n    return () => {\n      channel.unbind_all();\n      channel.unsubscribe();\n    };\n  }, [messages]);\n\n  console.log(messages);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-body\">\n        <Sidebar />\n        <ChatRoom messages={messages}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}